generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MAHASISWA
  DOSEN
  ADMIN
}

model User {
  id              String     @id @default(uuid())
  name            String
  email           String     @unique
  password        String
  role            Role       @default(MAHASISWA)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relasi dengan skripsi
  skripsis        Skripsi[]  @relation("MahasiswaSkripsi")
  bimbingan       Skripsi[]  @relation("DosenPembimbing")

  // Relasi dengan sidang
  sidangSebagai   Sidang[]   @relation("PengujiUtama")
  sidangSebagai2  Sidang[]   @relation("PengujiKedua")
}

model Skripsi {
  id             String         @id @default(uuid())
  title          String
  status         String         @default("Draft")
  mahasiswaId    String
  pembimbingId   String

  bab1           String?
  bab2           String?
  bab3           String?
  bab4           String?
  bab5           String?

  mahasiswa      User           @relation("MahasiswaSkripsi", fields: [mahasiswaId], references: [id])
  pembimbing     User           @relation("DosenPembimbing", fields: [pembimbingId], references: [id])

  bimbingan      LogBimbingan[]
  penilaian      Penilaian?
  sidang         Sidang?
  berkas         Berkas[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LogBimbingan {
  id         String    @id @default(uuid())
  skripsiId  String
  isi        String
  status     String    @default("Diajukan") // Bisa: Diajukan, Disetujui, Ditolak
  komentar   String?
  jadwal     DateTime?
  createdAt  DateTime  @default(now())

  skripsi    Skripsi   @relation(fields: [skripsiId], references: [id])
}

model Penilaian {
  id         String    @id @default(uuid())
  skripsiId  String    @unique
  nilai      Float
  komentar   String?
  createdAt  DateTime  @default(now())

  skripsi    Skripsi   @relation(fields: [skripsiId], references: [id])
}

model Sidang {
  id           String   @id @default(uuid())
  tanggal      DateTime
  ruang        String
  skripsiId    String   @unique

  penguji1Id   String
  penguji2Id   String

  skripsi      Skripsi  @relation(fields: [skripsiId], references: [id])
  penguji1     User     @relation("PengujiUtama", fields: [penguji1Id], references: [id])
  penguji2     User     @relation("PengujiKedua", fields: [penguji2Id], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Berkas {
  id         String    @id @default(uuid())
  skripsiId  String
  nama       String
  url        String
  status     String    @default("Menunggu") 
  komentar   String?
  createdAt  DateTime  @default(now())

  skripsi    Skripsi   @relation(fields: [skripsiId], references: [id])
}

model Setting {
  id     String @id @default(uuid())
  key    String @unique
  value  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}